package com.training.pojos;

import java.time.LocalDate;

public class Player {
	private int id;
	private String name;
	private LocalDate dob;
	private int score;
	private String email;
	private String phone;
	public Address address = new Address();

	public Player() {

	}

	public Player(int id, String name, LocalDate dob, int score, String email, String phone) {
		this.id = id;
		this.name = name;
		this.dob = dob;
		this.score = score;
		this.email = email;
		this.phone = phone;
	}

	public int getId() {
		return id;
	}

	public void setId(int id) {
		this.id = id;
	}

	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

	public LocalDate getDob() {
		return dob;
	}

	public void setDob(LocalDate date) {
		this.dob = date;
	}

	public int getScore() {
		return score;
	}

	public void setScore(int score) {
		this.score = score;
	}

	public String getEmail() {
		return email;
	}

	public void setEmail(String email) {
		this.email = email;
	}

	public String getPhone() {
		return phone;
	}

	public void setPhone(String phone) {
		this.phone = phone;
	}

	public Address getAddress() {
		return address;
	}

	public void setAddress(Address address) {
		this.address = address;
	}

	@Override
	public String toString() {
		return "Player [id=" + id + ", name=" + name + ", dob=" + dob + ", score=" + score + ", email=" + email
				+ ", phone=" + phone + ", address=" + address + "]";
	}

}




package com.training.pojos;

public class Address {
	private String drno;
	private String street;
	private String city;
	private String state;
	private long pincode;

	public Address() {

	}

	public Address(String drno, String street, String city, String state, long pincode) {
		this.drno = drno;
		this.street = street;
		this.city = city;
		this.state = state;
		this.pincode = pincode;
	}

	public String getDrno() {
		return drno;
	}

	public void setDrno(String drno) {
		this.drno = drno;
	}

	public String getStreet() {
		return street;
	}

	public void setStreet(String street) {
		this.street = street;
	}

	public String getCity() {
		return city;
	}

	public void setCity(String city) {
		this.city = city;
	}

	public String getState() {
		return state;
	}

	public void setState(String state) {
		this.state = state;
	}

	public long getPincode() {
		return pincode;
	}

	public void setPincode(long pincode) {
		this.pincode = pincode;
	}

	@Override
	public String toString() {
		return "Address [drno=" + drno + ", street=" + street + ", city=" + city + ", state=" + state + ", pincode="
				+ pincode + "]";
	}

}






package com.training.service;

import java.time.LocalDate;
import java.time.Period;

import com.training.pojos.Player;

public class PlayerService {
	Player[] p = new Player[5];

	public void addPlayer(Player player) {
		if (player.getId() < 1 && player.getId() > 999) {
			System.out.println("Id should be within (1-999)");
			System.exit(0);
		}
		if (!(player.getName().matches("^[A-Z][a-z]+.{2,}"))) {
			System.out.println("Name Invalid, First letter should be uppercase");
			System.exit(0);
		}
		LocalDate dob = player.getDob();
		LocalDate now = LocalDate.now();
		Period diff = Period.between(now, dob);
		int age = diff.getYears();
		if (age > 24) {
			System.out.println("Age should be below 24");
			System.exit(0);
		}
		if (player.getScore() < 10 && player.getScore() > 100) {
			System.out.println("Enter score between 10 and 100");
			System.exit(0);
		}
		if (!(player.getEmail().matches("((?=.*[0-9])(?=.*[A-Z])(?=.*[a-z]).{8,32})@([a-z]{4,7}).(com|co.in|org)"))) {
			System.out.println("Invalid Mail");
			System.exit(0);
		}
		if (!(player.getPhone().matches("^[+][9][1][-][6|7|8|9]([0-9]{9})"))) {
			System.out.println("Invalid Phone number");
			System.exit(0);
		}
		if (!(player.address.getDrno().matches("^[#]([0-9].{0,4})"))) {
			System.out.println("Invalid Door number");
			System.exit(0);
		}
		if (!(player.address.getStreet().matches("^[0-9]+[a-z]+"))) {
			System.out.println("Invalid Street");
			System.exit(0);
		}
		if (!(player.address.getCity().matches("[A-Za-z]+"))) {
			System.out.println("Invalid city");
			System.exit(0);
		}
		if (!(player.address.getState().matches("[A-Za-z]+"))) {
			System.out.println("Invalid state");
			System.exit(0);
		}
		if (player.address.getPincode() < 100000 && player.address.getPincode() > 1000000) {
			System.out.println("Invalid Pincode number");
			System.exit(0);
		} else {
			p[0] = player;
		}
	}

	public Player[] getAllPlayers() {

		return p;
	}
}





package com.training.pl;

import java.util.Scanner;
import com.training.pojos.Player;
import com.training.service.PlayerService;

import java.text.ParseException;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;

public class PlayerMain {

	public static void main(String[] args) throws ParseException {
		Scanner sc = new Scanner(System.in);
		System.out.println("Enter number of Players");
		int n = sc.nextInt();
		PlayerService ps = new PlayerService();
		Player p[] = new Player[n];
		for (int i = 0; i < n; i++) {
			System.out.println("Enter Player " + i + " Details");
			p[i] = new Player();
			System.out.println("Enter id");
			p[i].setId(sc.nextInt());
			System.out.println("Enter name");
			p[i].setName(sc.next());
			System.out.println("Enter dob");
			DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd/MM/yyyy");
			String date = sc.next();
			LocalDate localDate = LocalDate.parse(date, formatter);
			p[i].setDob(localDate);
			System.out.println("Enter score");
			p[i].setScore(sc.nextInt());
			System.out.println("Enter email");
			p[i].setEmail(sc.next());
			System.out.println("Enter phone number");
			p[i].setPhone(sc.next());
			System.out.println("Enter Address");
			System.out.println("Enter Door number");
			p[i].getAddress().setDrno(sc.next());
			System.out.println("Enter Street");
			p[i].getAddress().setStreet(sc.next());
			System.out.println("Enter City");
			p[i].getAddress().setCity(sc.next());
			System.out.println("Enter State");
			p[i].getAddress().setState(sc.next());
			System.out.println("Enter Pincode");
			p[i].getAddress().setPincode(sc.nextLong());
			ps.addPlayer(p[i]);
		}
		System.out.println("Print all players");
		Player[] players = ps.getAllPlayers();
		for (Player k : players) {
			System.out.println(k);
		}
		sc.close();
		// TODO Auto-generated method stub

	}

}





